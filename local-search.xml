<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>汇编前置知识</title>
    <link href="/2021/12/30/%E6%B1%87%E7%BC%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/12/30/%E6%B1%87%E7%BC%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<style type="text/css"><!--p{ text-indent: 2em;}--></style><body class="text"><h2>数据的表示方法</h2><p>进制也就是进位计数制，是人为定义的带进位的计数方法（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的“正”字计数法，以及类似的tally mark计数）。 对于任何一种进制---X进制，就表示每一位上的数运算时都是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p><p>我们生活中使用的是十进制，计算机中存储的是二进制，但是大的二进制非常难于阅读，十六进制数表示二进制数据非常方便。十六进制的每个数据位都可以代表4个二进制位，所以两个十六进制一起就可以代表一个字节。</p><h2>进制的转换</h2><table>    <tr>        <td>十进制</td>        <td>二进制</td>        <td>十六进制</td>    </tr>    <tr>        <td>0</td>        <td>0000</td>        <td>0</td>    </tr>    <tr>        <td>1</td>        <td>0001</td>        <td>1</td>    </tr>    <tr>        <td>2</td>        <td>0010</td>        <td>2</td>    </tr>    <tr>        <td>3</td>        <td>0011</td>        <td>3</td>    </tr>    <tr>        <td>4</td>        <td>0100</td>        <td>4</td>    </tr>    <tr>        <td>5</td>        <td>0101</td>        <td>5</td>    </tr>    <tr>        <td>6</td>        <td>0110</td>        <td>6</td>    </tr>    <tr>        <td>7</td>        <td>0111</td>        <td>7</td>    </tr>    <tr>        <td>8</td>        <td>1000</td>        <td>8</td>    </tr>    <tr>        <td>9</td>        <td>1001</td>        <td>9</td>    </tr>    <tr>        <td>10</td>        <td>1010</td>        <td>A</td>    </tr>    <tr>        <td>11</td>        <td>1011</td>        <td>B</td>    </tr>    <tr>        <td>12</td>        <td>1100</td>        <td>C</td>    </tr>    <tr>        <td>13</td>        <td>1101</td>        <td>D</td>    </tr>    <tr>        <td>14</td>        <td>1110</td>        <td>E</td>    </tr>    <tr>        <td>15</td>        <td>1111</td>        <td>F</td>    </tr></table><h3>转换方法</h3><b>十进制转二进制：</b>除二反向取余数    无符号十进制整数转化为二进制数的方法是:十进制数重复除以2，每次的余数记录下来作为当前二进制数位的值，直到商为0为止。把余数列的数字反向排列就得到二进制数。<br><p><b>二进制转十进制：</b>位权表示法<br>公式为：</p><img src="/2021/12/30/%E6%B1%87%E7%BC%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/pasted-1.png" class title="This is an example image"><p><img src="/2021/12/30/%E6%B1%87%E7%BC%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/pasted-1.png" alt="upload successful"><br>公式中的D代表二进制数位。举例来说，二进制数0000 1001等于9，计算如下：<br><img src="/2021/12/30/%E6%B1%87%E7%BC%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/pasted-3.png" alt="upload successful"><br>同样的公式适用于八进制、十六进制•••</p><h2>整数存储的尺寸</h2><p>在计算机中，所有数据的基本存储单位都是字节（byte），每个字节包含8个位。含8个位。其他的存储单位还有字( word，包含两个字节)、双字( doubleword，包含4个字节)和八字节 ( quadword，包含8个字节)。</p>![upload successful](pasted-4.png)<h2>原码反码补码</h2>在计算机中，正数原码存储，负数补码存储。<br><b>原码:</b>最高位位符号位，其余各位为数值本身的绝对值<br><b>反码:</b>符号位不变，将二进制数按位取反，所得的新二进制数称为原二进制数的反码。<br><b>补码:</b>反码加1称为补码。也就是说，要得到一个数的补码，先得到反码，然后将反码加上1，所得数称为补码。<br>十六进制的补码：要计算十六进制的补码，可以将其全部的数据位取反然后加1.十六进制数各位求反的一个简单方法就是将对应的数字从15中减除，如：<br>6A3D-->95C2+1-->95C3<br>95C3-->6A3C+1-->6A3D<br>21F0-->DE0F+1-->DE10<br>DE10-->21EF+1-->21F0<br>由此可知，<b>补码运算是可逆的</b>。<h2>无符号整数与有符号整数</h2><b>无符号整数:</b>无符号整数只能是正数或0<br><b>有符号整数:</b>有符号整数可以是正数或负数。在Intel体系结构中，最高有效位（MSB）表示数的符号：0表示正数，1表示负数。<br>![upload successful](pasted-5.png)<h3>取值范围</h3>![upload successful](pasted-6.png)<br>![upload successful](pasted-7.png)</body>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
